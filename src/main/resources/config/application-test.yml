server:
  port: 9060

callthink:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1/CALLTHINK?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC&useSSL=true
    username: root
    password: ULTRATEL
    #初始化连接池的连接数量 大小，最小，最大
    initial-size: 4
    min-idle: 4
    max-active: 16
    #配置获取连接等待超时的时间
    max-wait: 60000
    #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    time-between-eviction-runs-millis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    min-evictable-idle-time-millis: 30000
    validation-query: SELECT 1
    test-while-idle: true
    test-on-borrow: true
    test-on-return: false
    # 是否缓存preparedStatement，也就是PSCache  官方建议MySQL下建议关闭   个人建议如果想用SQL防火墙 建议打开
    pool-prepared-statements: false
    max-pool-prepared-statement-per-connection-size: 20
    filters: stat
    # 通过connectProperties属性来打开mergeSql功能，慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
  http:
    encoding:
      force: true
      charset: UTF-8

crm:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1/CALLTHINK_CRM?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC&useSSL=true
    username: root
    password: ULTRATEL
    #初始化连接池的连接数量 大小，最小，最大
    initial-size: 5
    min-idle: 5
    max-active: 20
    #配置获取连接等待超时的时间
    max-wait: 60000
    #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    time-between-eviction-runs-millis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    min-evictable-idle-time-millis: 30000
    validation-query: SELECT 1
    test-while-idle: true
    test-on-borrow: true
    test-on-return: false
    # 是否缓存preparedStatement，也就是PSCache  官方建议MySQL下建议关闭   个人建议如果想用SQL防火墙 建议打开
    pool-prepared-statements: false
    max-pool-prepared-statement-per-connection-size: 20
    filters: stat
    # 通过connectProperties属性来打开mergeSql功能，慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
  http:
    encoding:
      force: true
      charset: UTF-8

#分页pageHelper
pagehelper:
  helper-dialect: mysql
  reasonable: true
  support-methods-arguments: true


#redis配置
spring:
  redis:
    database: 0
    host: 192.168.27.128
    port: 6379
    password: 123456
  application:
    name: fzl-admin-api
  elasticsearch:
    rest:
      uris: 192.168.27.128:9200
      username: elastic
      password: rT7FjHXsMQTa9i16ctAM





# knife4j接口文档配置
knife4j:
  # 是否开启Knife4j增强模式
  enable: true
  # 前端Ui的个性化配置属性
  setting:
    # Ui默认显示语言,目前主要有两种:中文(zh-CN)、英文(en-US)
    language: zh-CN
    # 是否显示界面中SwaggerModel功能
    enableSwaggerModels: true
    # 是否显示界面中"文档管理"功能
    enableDocumentManage: true
    # 重命名SwaggerModel名称,默认
    swaggerModelName: 实体类列表
    # 是否开启界面中对某接口的版本控制,如果开启，后端变化后Ui界面会存在小蓝点
    enableVersion: true
    # 是否在每个Debug调试栏后显示刷新变量按钮,默认不显示
    enableReloadCacheParameter: false
    # 调试Tab是否显示AfterScript功能,默认开启
    enableAfterScript: true
    # 具体接口的过滤类型
    enableFilterMultipartApiMethodType: POST
    # 针对RequestMapping的接口请求类型,在不指定参数类型的情况下,如果不过滤,默认会显示7个类型的接口地址参数,如果开启此配置,默认展示一个Post类型的接口地址
    enableFilterMultipartApis: false
    # 是否开启请求参数缓存
    enableRequestCache: true
    # 是否启用Host
    enableHost: false
    # 具体的Host
    enableHostText: 127.0.0.1:9090
    # 是否开启自定义主页内容
    enableHomeCustom: false
    # 主页内容Markdown文件路径
    homeCustomLocation: classpath:markdown/home.md
    # 是否禁用Ui界面中的搜索框
    enableSearch: true
    # 是否显示Footer
    enableFooter: false
    # 是否开启自定义Footer
    enableFooterCustom: true
    # 自定义Footer内容
    footerCustomContent: Apache License 2.0 | FENGZHILONG
    # 是否开启动态参数调试功能
    enableDynamicParameter: false
    # 启用调试
    enableDebug: true
    # 显示OpenAPI规范
    enableOpenApi: false
    # 显示服务分组
    enableGroup: true
  # 是否开启一个默认的跨域配置,该功能配合自定义Host使用
  cors: false
  # 是否开启生产环境保护策略
  production: false
  # 对Knife4j提供的资源提供BasicHttp校验,保护文档
  basic:
    # 关闭BasicHttp功能
    enable: true
    # 用户名
    username: admin
    #密码
    password: admin


logging:
  config: classpath:logback/logback-test.xml

# 配置prometheus
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    prometheus:
      enabled: true
    health:
      show-details: always
  metrics:
    tags:
      application: ${spring.application.name}
    export:
      prometheus:
        enabled: true
